{"version":3,"sources":["components/Tooltip.js","components/Deck.js","components/map-styles.js","components/Loading.js","assets/icons/gps.svg","components/Map.js","App.js","serviceWorker.js","index.js"],"names":["Tooltip","className","this","props","province","country","role","aria-label","confirmed","deaths","lat","lng","update","React","Component","info","largest","average","getInfo","data","dataParameter","i","locations","length","latest","pickColor","value","low","high","delta","Math","sqrt","color","parseInt","cbrt","opacityValue","opacityLimit","document","addEventListener","e","el","getElementById","x","clientX","y","clientY","isHovering","style","left","top","scatterPlotLayer","ScatterplotLayer","id","opacity","filled","radiusMaxPixels","radiusMinPixels","getPosition","d","coordinates","longitude","latitude","getFillColor","updateTriggers","hoverPlotLayer","onHover","object","parseFloat","toFixed","ReactDOM","render","county","toString","replace","last_updated","setTooltip","pickable","heatMapLayer","HeatmapLayer","getWeight","radiusPixels","threshold","Loading","state","messages","index","floor","random","setState","pickRandom","_extends","Object","assign","target","arguments","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","fill","_ref3","_ref","svgRef","title","height","viewBox","width","ref","ForwardRef","forwardRef","GoogleMap","googleMapRef","createRef","getLocation","bind","resize","layers","worldData","usData","heatMap","scatterPlot","getData","_this","googleMapScript","src","process","window","body","appendChild","googleMap","createGoogleMap","map","google","maps","Map","current","zoom","minZoom","center","restriction","latLngBounds","north","south","west","east","disableDefaultUI","styles","mapStyles","draggableCursor","gestureHandling","event","addDomListener","navigator","geolocation","getCurrentPosition","position","coords","setCenter","setZoom","fetchData","then","obj","convertToLocalTime","push","USData","currCenter","getCenter","trigger","overlay","GoogleMapsOverlay","setMap","setProps","prevProps","prevState","prevStateObj","stateLayers","initLayers","JSON","stringify","changeLayers","zIndex","backgroundColor","onClick","requestLocation","url","a","fetch","response","json","Date","toLocaleString","App","Boolean","location","hostname","match","StrictMode","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e344582f.chunk.js","sourcesContent":["import React from 'react';\n// eslint-disable-next-line\nimport styles from './css/tooltip.css';\n\nclass Tooltip extends React.Component {\n  // all data is passed via props\n  render() {\n    return(\n      <div className=\"tooltip\">\n        <h1> {this.props.province ? this.props.province + \",\" : null} {this.props.country} </h1>\n        <h2> <span role=\"img\" aria-label=\"confirmed\">😷</span>: {this.props.confirmed} </h2>\n        <h2> <span role=\"img\" aria-label=\"deaths\">💀</span>: {this.props.deaths} </h2>\n        <p> Lat: {this.props.lat} Lng: {this.props.lng} </p>\n        <p> {this.props.update} </p>\n      </div>\n    )\n  }\n}\n\nexport default Tooltip;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Tooltip from './Tooltip';\nimport { ScatterplotLayer, TextLayer } from '@deck.gl/layers';\nimport { HeatmapLayer } from '@deck.gl/aggregation-layers';\n\n// gets the highest, the lowest and the average cases of COVID19\nconst info = {\n  largest: 0,\n  average: 0,\n}\n\n// some sorting algorithm here instead later\n// gets info to prep picking colors\nfunction getInfo(data, dataParameter) {\n  info.largest = 0;\n  info.average = 0;\n  // gets the value by the dataParameter\n  for (var i = 0; i < data.locations.length; i++) {\n    if (data.locations[i].latest[dataParameter] > info.largest) {\n      info.largest = data.locations[i].latest[dataParameter];\n    }\n  }\n  // gets the average case value\n  info.average = data.latest[dataParameter] / (data.locations.length + 1);\n}\n\n// selects a color for scatterplot layers\nfunction pickColor(value) {\n  // the range of colors, green to red\n  const low = [3, 252, 11];\n  const high = [252, 181, 3];\n  // color modifiying delta\n  const delta = (value / Math.sqrt(info.largest));\n  // get the color value based off the range\n  const color = [];\n  for (var i = 0; i < 3; i++) {\n    color[i] = parseInt((high[i] - low[i]) * delta + low[i]);\n    if (color[i] > 255) {\n      color[i] = 255;\n    } else if (color[i] < 0) {\n      color[i] = 0;\n    }\n  }\n  // set opacity\n  if (value < Math.cbrt(info.average)) {\n    const opacityValue = value / Math.cbrt(info.average);\n    const opacityLimit = 50;\n\n    color[3] = opacityValue * 255;\n    // sets opacity limit\n    if (opacityLimit > color[3]) {\n      // for 0 cases change opacity to be noticeably different\n      if (value === 0) {\n        color[3] = opacityLimit / 2;\n      }\n       color[3] = opacityLimit;\n    }\n\n  } else {\n    color[3] = 255;\n  }\n\n  return color;\n}\n\n// check if the mouse is moving\ndocument.addEventListener('mousemove', checkMovement);\nlet isHovering = false;\n\n// deck gl doesn't have any way to check if not hovering, so looks at mouse movement vs deck gl's hovering to determine if hovering or not\n// fixes issue where tooltip still shows and gets stuck after dragging unless hovered somewhere\nfunction checkMovement(e) {\n  const el = document.getElementById('tooltip');\n  // mouse x and y\n  const x = e.clientX;\n  const y = e.clientY;\n\n  // change tooltip style if hovering\n  if (isHovering) {\n    el.className = 'displayBlock';\n    el.style.left = (x + 10) + 'px';\n    el.style.top = (y + 10) + 'px';\n  } else {\n    // stop displaying the element\n    el.className = 'displayNone';\n  }\n\n  isHovering = false;\n}\n\n// function called onHover for deck gl layers, used to check if the user is hovering and render tooltip accordingly\nfunction setTooltip(object, x, y) {\n  const el = document.getElementById('tooltip');\n  if (object) {\n    const lat = parseFloat(object.coordinates.latitude).toFixed(3);\n    const lng = parseFloat(object.coordinates.longitude).toFixed(3);\n    isHovering = true;\n\n    ReactDOM.render(<Tooltip\n      province={object.province ? object.province : object.county}\n      country={object.country}\n      confirmed={object.latest.confirmed.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n      deaths={object.latest.deaths.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n      lat={lat}\n      lng={lng}\n      update={object.last_updated}\n      />, el);\n  }\n}\n\n// Deck gl layers\nconst scatterPlotLayer = (data, dataParameter) => new ScatterplotLayer({\n  id: 'scatter',\n  data: data.locations,\n  opacity: 1,\n  filled: true,\n  radiusMaxPixels: 7,\n  radiusMinPixels: 3,\n  getPosition: d => [d.coordinates.longitude, d.coordinates.latitude],\n  getFillColor: d => pickColor(d.latest[dataParameter]),\n  updateTriggers: {\n    getFillColor: d => pickColor(d.latest[dataParameter]),\n  }\n});\n\n// layer used to check if there is user hovering, radius is much bigger than scatterplot\nconst hoverPlotLayer = (data, dataParameter) => new ScatterplotLayer({\n  id: 'hover',\n  data: data.locations,\n  opacity: 0,\n  filled: true,\n  radiusMaxPixels: 50,\n  radiusMinPixels: 30,\n  getPosition: d => [d.coordinates.longitude, d.coordinates.latitude],\n  onHover: info => setTooltip(info.object, info.x, info.y),\n  pickable: true,\n});\n\nconst heatMapLayer = (data, dataParameter) => new HeatmapLayer({\n  id: 'heat',\n  data: data.locations,\n  getPosition: d => [d.coordinates.longitude, d.coordinates.latitude],\n  getWeight: d => d.latest[dataParameter],\n  radiusPixels: 60,\n  threshold: 0.005,\n  updateTriggers: {\n    getWeight: d => d.latest[dataParameter],\n  }\n});\n\nconst textLayer = (data, dataParameter) => new TextLayer({\n  id: 'text',\n  data: data.locations,\n  getPosition: d => [d.coordinates.longitude, d.coordinates.latitude],\n  getText: d => d.latest[dataParameter].toString(),\n  getSize: 20,\n  getAngle: 0,\n  getColor: [255, 255, 255, 255],\n  getTextAnchor: 'middle',\n  getAlignmentBaseline: 'center',\n});\n\n\nexport { scatterPlotLayer, hoverPlotLayer, heatMapLayer, textLayer, getInfo };\n","// Google maps dark theme style\nexport default [{\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#1d2c4d\"}]},{\"elementType\":\"labels.text.fill\",\"stylers\":[{\"color\":\"#8ec3b9\"}]},{\"elementType\":\"labels.text.stroke\",\"stylers\":[{\"color\":\"#1a3646\"}]},{\"featureType\":\"administrative.country\",\"elementType\":\"geometry.stroke\",\"stylers\":[{\"color\":\"#4b6878\"}]},{\"featureType\":\"administrative.land_parcel\",\"elementType\":\"labels.text.fill\",\"stylers\":[{\"color\":\"#64779e\"}]},{\"featureType\":\"administrative.province\",\"elementType\":\"geometry.stroke\",\"stylers\":[{\"color\":\"#4b6878\"}]},{\"featureType\":\"landscape.man_made\",\"elementType\":\"geometry.stroke\",\"stylers\":[{\"color\":\"#334e87\"}]},{\"featureType\":\"landscape.natural\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#023e58\"}]},{\"featureType\":\"poi\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#283d6a\"}]},{\"featureType\":\"poi\",\"elementType\":\"labels.text\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"poi\",\"elementType\":\"labels.text.fill\",\"stylers\":[{\"color\":\"#6f9ba5\"}]},{\"featureType\":\"poi\",\"elementType\":\"labels.text.stroke\",\"stylers\":[{\"color\":\"#1d2c4d\"}]},{\"featureType\":\"poi.business\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"poi.park\",\"elementType\":\"geometry.fill\",\"stylers\":[{\"color\":\"#023e58\"}]},{\"featureType\":\"poi.park\",\"elementType\":\"labels.text.fill\",\"stylers\":[{\"color\":\"#3C7680\"}]},{\"featureType\":\"road\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#304a7d\"}]},{\"featureType\":\"road\",\"elementType\":\"labels.icon\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"road\",\"elementType\":\"labels.text.fill\",\"stylers\":[{\"color\":\"#98a5be\"}]},{\"featureType\":\"road\",\"elementType\":\"labels.text.stroke\",\"stylers\":[{\"color\":\"#1d2c4d\"}]},{\"featureType\":\"road.highway\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#2c6675\"}]},{\"featureType\":\"road.highway\",\"elementType\":\"geometry.stroke\",\"stylers\":[{\"color\":\"#255763\"}]},{\"featureType\":\"road.highway\",\"elementType\":\"labels.text.fill\",\"stylers\":[{\"color\":\"#b0d5ce\"}]},{\"featureType\":\"road.highway\",\"elementType\":\"labels.text.stroke\",\"stylers\":[{\"color\":\"#023e58\"}]},{\"featureType\":\"transit\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"transit\",\"elementType\":\"labels.text.fill\",\"stylers\":[{\"color\":\"#98a5be\"}]},{\"featureType\":\"transit\",\"elementType\":\"labels.text.stroke\",\"stylers\":[{\"color\":\"#1d2c4d\"}]},{\"featureType\":\"transit.line\",\"elementType\":\"geometry.fill\",\"stylers\":[{\"color\":\"#283d6a\"}]},{\"featureType\":\"transit.station\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#3a4762\"}]},{\"featureType\":\"water\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#0e1626\"}]},{\"featureType\":\"water\",\"elementType\":\"labels.text.fill\",\"stylers\":[{\"color\":\"#4e6d70\"}]}]\n","import React from 'react';\n//eslint-disable-next-line\nimport styles from './css/loading.css';\n\n// loading component\nclass Loading extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      // discord style messages while loading, randomized each time\n      messages: [\n        \"Social distancing is the best way to prevent the spread of COVID-19.\",\n        \"Stay safe!\",\n        \"Stay at least 2 metres away from others...\",\n        \"Wash your hands regularly!\",\n        \"Wash your hands for at least 20 seconds!\",\n      ],\n      index: 0, // random message index\n    }\n  }\n  // picks a random index from the array length\n  pickRandom() {\n    const index = Math.floor(Math.random()* this.state.messages.length);\n    this.setState({index: index});\n  }\n\n  componentDidMount() {\n    this.pickRandom();\n  }\n\n  render() {\n    return(\n      <div className=\"loading\">\n        <div className=\"progress\"></div>\n        <h1> Loading 2,500+ COVID-19 (Coronavirus) data points <span role=\"img\" aria-label=\"sick-emoji\">😷</span> </h1>\n        <p> {this.state.messages[this.state.index]} </p>\n      </div>\n    )\n  }\n}\n\nexport default Loading;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M0 0h24v24H0z\",\n  fill: \"none\"\n});\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm8.94 3c-.46-4.17-3.77-7.48-7.94-7.94V1h-2v2.06C6.83 3.52 3.52 6.83 3.06 11H1v2h2.06c.46 4.17 3.77 7.48 7.94 7.94V23h2v-2.06c4.17-.46 7.48-3.77 7.94-7.94H23v-2h-2.06zM12 19c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z\"\n});\n\nvar SvgGps = function SvgGps(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"gps\",\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    width: 24,\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2, _ref3);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgGps, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/gps.ca0b1d83.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\nimport { scatterPlotLayer, hoverPlotLayer, heatMapLayer, getInfo } from './Deck';\nimport { GoogleMapsOverlay } from '@deck.gl/google-maps';\nimport mapStyles from './map-styles';\n// eslint-disable-next-line\nimport styles from './css/map.css';\nimport { fetchData, convertToLocalTime } from '../App';\nimport Loading from './Loading';\nimport { ReactComponent as GPS } from '../assets/icons/gps.svg';\n\n// data from multiple sources\nlet data = {\n  latest: {},\n  locations: [],\n};\n\nclass GoogleMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getLocation = this.getLocation.bind(this);\n    this.resize = this.resize.bind(this);\n\n    this.state = {\n      layers: [], // which layers are being used\n      worldData: false, // check if world data is fetched\n      usData: false, // check if us data is fetched\n      dataParameter: \"confirmed\", // which dataParameter is currently displayed, confirmed, deaths or recovered\n      heatMap: false, // layer booleans\n      scatterPlot: true,\n    }\n  }\n\n  googleMapRef = React.createRef();\n\n  componentDidMount() {\n    this.getData();\n\n    const _this = this;\n    // create the google map component and loads the script\n    const googleMapScript = document.createElement('script');\n    // gets the Google Maps API Key from firebase and creates the map\n    const GOOGLE_MAP_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API;\n    googleMapScript.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAP_API_KEY}&libraries=visualization`;\n  \n    window.document.body.appendChild(googleMapScript);\n    // initializes the map\n    googleMapScript.addEventListener('load', () => {\n      _this.googleMap = _this.createGoogleMap();\n    });\n  \n  }\n\n  // creates the google map component\n  createGoogleMap() {\n    let map =  new window.google.maps.Map(this.googleMapRef.current, {\n      zoom: 3,\n      minZoom: 2,\n      center: {\n        lat:  30,\n        lng:  0,\n      },\n      restriction: {\n        latLngBounds: {\n            north: 85,\n            south: -85,\n            west: -180,\n            east: 180\n        }\n      },\n      disableDefaultUI: true,\n      styles: mapStyles,\n      draggableCursor: 'crosshair',\n      gestureHandling: 'greedy',\n    });\n\n    window.google.maps.event.addDomListener(window, 'resize', this.resize);\n    return map;\n  }\n\n  // request the location of the user\n  requestLocation() {\n    navigator.geolocation.getCurrentPosition(this.getLocation);\n  }\n\n  // changes the center to be the user's location to see data points close to them first\n  getLocation(position) {\n    let lat = position.coords.latitude;\n    let lng = position.coords.longitude;\n    this.googleMap.setCenter({lat: lat, lng: lng});\n    this.googleMap.setZoom(7);\n  }\n\n  // fetches the data from the apis\n  getData() {\n    // sources\n    const COVID19API_WORLD = \"https://coronavirus-tracker-api.herokuapp.com/v2/locations\";\n    const COVID19API_US = \"https://coronavirus-tracker-api.herokuapp.com/v2/locations?source=csbs\";\n    // fetch world data and push to data object\n    fetchData(COVID19API_WORLD).then(worldData => {\n      // pushes to main data object\n      for (var i = 0; i < worldData.locations.length; i++) {\n        let obj = worldData.locations[i];\n        obj.coordinates.latitude = parseFloat(obj.coordinates.latitude);\n        obj.coordinates.longitude = parseFloat(obj.coordinates.longitude);\n        // removes all US data as US has it's own source and removes NULL island\n        if (obj.country !== \"US\" && obj.province !== \"Grand Princess\" && !(obj.coordinates.latitude === 0 && obj.coordinates.longitude === 0)) {\n          obj.last_updated = convertToLocalTime(obj.last_updated);\n          data.locations.push(obj);\n        }\n      }\n\n      data.latest = worldData.latest;\n      this.setState({worldData: true});\n    });\n    // fetches us data and push to data object\n    fetchData(COVID19API_US).then(USData => {\n      for (var i = 0; i < USData.locations.length; i++) {\n        USData.locations[i].last_updated = convertToLocalTime(USData.locations[i].last_updated);\n        USData.locations[i].coordinates.latitude = parseFloat(USData.locations[i].coordinates.latitude);\n        USData.locations[i].coordinates.longitude = parseFloat(USData.locations[i].coordinates.longitude);\n        data.locations.push(USData.locations[i]);\n      }\n\n      this.setState({usData: true});\n    });\n  }\n\n  // resize the map on window's resize\n  resize() {\n    let currCenter = this.googleMap.getCenter();\n    window.google.maps.event.trigger(this.googleMap, 'resize');\n    this.googleMap.setCenter(currCenter);\n  }\n\n  // initalizes the deck gl layers based off the data and the dataParameter\n  initLayers() {\n    const layers = [\n      this.state.heatMap ? heatMapLayer(data, this.state.dataParameter) : null ,\n      this.state.scatterPlot ? scatterPlotLayer(data, this.state.dataParameter) : null ,\n      hoverPlotLayer(data, this.state.dataParameter),\n    ];\n    // sets overlay to google map\n    this.overlay = new GoogleMapsOverlay({\n      layers: layers,\n    });\n\n    this.overlay.setMap(this.googleMap);\n    this.setState({layers: layers});\n  }\n\n  // used to change layers based off the layer booleans\n  changeLayers() {\n    getInfo(data, this.state.dataParameter);\n    const layers = [\n      this.state.heatMap ? heatMapLayer(data, this.state.dataParameter) : null,\n      this.state.scatterPlot ? scatterPlotLayer(data, this.state.dataParameter) : null,\n      hoverPlotLayer(data, this.state.dataParameter),\n    ]\n\n    this.setState({layers: layers}); // updates the state\n    this.overlay.setProps({layers: layers}); // updates the google maps overlay via props\n  }\n\n  // on state update acts accordingly\n  componentDidUpdate(prevProps, prevState) {\n    // creates clone of the objects\n    const state = {...this.state };\n    const prevStateObj = {...prevState };\n    const stateLayers = this.state.layers.length;\n    // ignores unwanted things to avoid max depth limit\n    state.layers = 0;\n    prevStateObj.layers = 0;\n    // init layers is both data sources have been fetched, ignores this if layers have been init\n    if (this.state.usData && this.state.worldData && stateLayers === 0) {\n      getInfo(data, this.state.dataParameter);\n      this.initLayers();\n    // checks if anything has been updates and if layers have been init\n    } else if ((JSON.stringify(state) !== JSON.stringify(prevStateObj)) && stateLayers !== 0) {\n      this.changeLayers();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"map-container\">\n        {!(this.state.usData && this.state.worldData) && <Loading/>}\n        <div id=\"tooltip\" className=\"displayNone\" style={{position: 'absolute', zIndex: 3}}></div>\n\n        <button\n          style={{backgroundColor: this.state.scatterPlot ? '#FFF' : \"#cfcfcf\"}}\n          onClick={() => this.setState({scatterPlot: !this.state.scatterPlot})}>\n          Scatterplot\n        </button>\n\n        <button\n          style={{backgroundColor: this.state.heatMap ? '#FFF' : \"#cfcfcf\"}}\n          onClick={() => this.setState({heatMap: !this.state.heatMap})}>\n          Heat Map\n        </button>\n\n        <div className=\"divider\"/>\n        <button\n          style={{backgroundColor: (this.state.dataParameter === \"confirmed\") ? '#FFF' : \"#cfcfcf\"}}\n          onClick={() => this.setState({dataParameter: \"confirmed\"})}>\n          <span role=\"img\" aria-label=\"confirmed\"> 😷 </span>\n        </button>\n\n        <button\n          style={{backgroundColor: (this.state.dataParameter === \"deaths\") ? '#FFF' : \"#cfcfcf\"}}\n          onClick={() => this.setState({dataParameter: \"deaths\"})}>\n          <span role=\"img\" aria-label=\"deaths\"> 💀 </span>\n        </button>\n\n        {\n          navigator.geolocation &&\n          <button\n            className=\"location\"\n            aria-label=\"Location\"\n            onClick={() => this.requestLocation()}>\n            <GPS/>\n          </button>\n        }\n\n        <div\n          id=\"google-map\"\n          ref={this.googleMapRef}\n        />\n\n      </div>\n    )\n  }\n}\n\nexport default GoogleMap;\n","import React from 'react';\nimport './App.css';\nimport GoogleMap from './components/Map';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GoogleMap/>\n    </div>\n  );\n}\n\n// fetch data async function used in google map component\nasync function fetchData(url) {\n  let response = await fetch(url);\n  let data = await response.json()\n  return data;\n}\n\n// converts the ISO 8601 timezone value from the data to the user's local time zone value\nfunction convertToLocalTime(value) {\n  let date = new Date(value);\n  return date.toLocaleString();\n}\n\nexport { fetchData, convertToLocalTime };\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}